<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<link rel="shortcut icon" href="#">
		<link rel="stylesheet" href="css/style.css">
        <title>nun</title>
		<style>
			body{
				margin: 0;
				overflow: hidden;
			}
			#blocker {
				position: absolute;
				width: 100%;
				height: 100%;
				background-color: rgba(0,0,0,0.1);
        		color: #ffffff;
			}
			#click-to-start {
				width: 100%;
				height: 100%;

				display: flex;
				flex-direction: column;
				justify-content: center;
				align-items: center;

				text-align: center;
				font-size: 14px;
				cursor: pointer;
			}
			.cross {
				height: 10px;
				width: 10px;
				position: absolute;
				top: 50%;
				left: 50%;
				margin: -5px 0px 0px -5px;
			}
			canvas{
				position: absolute;
				filter: url(#tritanopia);
				pointer-events: none;
				z-index: -2;
				margin-top: -18px;
			}
			.object{
				opacity: 0.6;
			}

		</style>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/tween.js/18.6.4/tween.umd.min.js"></script>
	</head>
	<body>
		<div class="logo-image"><svg width="72" height="25" viewBox="0 0 72 25" fill="none" xmlns="http://www.w3.org/2000/svg">
			<path d="M18 21V11C18 7.13401 14.866 4 11 4V4C7.13401 4 4 7.13401 4 11V21" stroke="#882DE3" stroke-width="7" stroke-linecap="round"/>
			<path d="M29 4L29 14C29 17.866 32.134 21 36 21V21C39.866 21 43 17.866 43 14L43 4" stroke="#882DE3" stroke-opacity="0.5" stroke-width="7" stroke-linecap="round"/>
			<path d="M68 21V11C68 7.13401 64.866 4 61 4V4C57.134 4 54 7.13401 54 11V21" stroke="#882DE3" stroke-width="7" stroke-linecap="round"/>
			</svg>
			</a>
		</div>
	
		<div id="blocker">
			<div id="click-to-start">
				<p style="font-size:36px">
					Click to play
				</p>
			</div>
		</div>
        
		<div class="wrapper timeover-popup">
			<div class="popup-box">
				<div class="popup-title">
					<p>Time over</p>
				</div>
				<div class="indicator-area-01">
					<div class="btn-area retry-btn-box">
						<div class="btn-retry btn-retry-RG">
							<div class="img-retry"><img src="img/retry.png" alt=""></div>
							<p>다시하기</p>
						</div>
					</div>
					<div class="btn-area stop-btn-box">
						<div class="btn-stop btn-stop-BY">
							<div class="img-stop"><img src="img/stop.png" alt=""></div>
							<p>그만두기</p>
						</div>
					</div>
				</div>
			</div>
			<div class="btn-next next-color-blind btn-next-BY">
				<h1>넘어가기</h1>
			</div>
		</div>

		<div class="wrapper pause-popup">
			<div class="popup-box">
				<div class="cont-wrapper">
					<div class="popup-title">
						<p>Pause</p>
					</div>
					<div class="indicator-area-02">
							<div class="btn-area retry-btn-box">
								<div class="btn-retry btn-retry-BY">
									<div class="img-retry"><img src="img/retry.png" alt=""></div>
									<p>다시하기</p>
								</div>
							</div>
							<div class="btn-area continue-btn-box">
								<div class="btn-continue btn-continue-BY">
									<div class="img-continue"><img src="img/play.png" alt=""></div>
									<p>이어하기</p>
								</div>
							</div>
							<div class="btn-area stop-btn-box">
								<div class="btn-stop btn-stop-RG">
									<div class="img-stop"><img src="img/stop.png" alt=""></div>
									<p>그만두기</p>
								</div>
							</div>
					</div>
				</div>
			</div>
			<div class="btn-next next-color-blind">
				<h1>넘어가기</h1>
			</div>
		</div>

        
			<div class="wrapper clear-popup">
				<div class="popup-box">
					<div class="popup-title">
						<p>Clear</p>
					</div>
					<div class="indicator-area">
						<div class="btn-area next-btn-box">
							<div class="btn-next btn-next-BY">
								<div class="img-retry"><img src="img/next.png" alt=""></div>
								<p>다음 넘어가기</p>
							</div>
						</div>  
					</div>
				</div>
			</div>

			<div class="instructions">
				<div class="instruction">
					<img src="img/instructon01.png">
					<img src="img/instructon02.png">
					<img src="img/instructon03.png">
					<img src="img/instructon04.png">
					<img src="img/instructon05.png">
				</div>
			</div>
		<div class="mission">
			<p>크리스마스의 계절, 겨울이 왔어요!<br>
				청황색맹의 시선으로 곳곳에 놓여진 크리스마스 트리 장식품을 찾아 트리 꾸미기를 완료해 주세요!
			</p>
		</div>
		<div class="non-diegetic-ui">
			<div class="time-bar-area">
			   <div class="time-bar">
				   <img src="img/timer.png">
				   <div class="timer">
					   <h1 id="countdown">00:00</h1>
				   </div>
			   </div>

			   <div class="hint-btn">
					<img src="img/hint.png">
					<p>Hint</p>
					<div class="hint-timer">
						<div class="hint-timer-color"></div>
					</div>
				</div>
			</div>

			<div class="ingame-info-area">
				<div class="list-title">찾아야하는 물건</div>
				<div class="list-area">

					<div id="element1" class="object">
					<img src="img/object/ornament1.png">
					<!-- <p>빨간 사과</p> -->
					</div>
					<div id="element2" class="object">
					<img src="img/object/ornament1.png">
					<!-- <p>빨간 사과</p> -->
					</div>
					<div id="element3" class="object">
					<img src="img/object/ornament1.png">
					<!-- <p>빨간 사과</p> -->
					</div>

					<div id="element4" class="object">
					<img src="img/object/star1.png">
					<!-- <p>빨간 사과</p> -->
					</div>
					<div id="element5" class="object">
					<img src="img/object/socks1.png">
					<!-- <p>빨간 사과</p> -->
					</div>
					<div id="element6" class="object">
					<img src="img/object/socks1.png">
					<!-- <p>빨간 사과</p> -->
					</div>
				</div>
			</div>
		</div>

		<div class="crossWrap">
			<div class="cross"><img src="./crosshair/crosshair.svg" alt=""></div>
		</div>
		<audio id="sound" preload = "none"><source type="audio/mpeg"></audio>
		<audio id="BGM" preload = "none"><source type="audio/mpeg"></audio>
		<audio id="Cicada" preload = "none"><source type="audio/mpeg"></audio>


		
        <svg class="blue-yellow-filter" width="0" height="0">
			<filter id="tritanopia">
				<feColorMatrix values="1.256 -0.077 -0.179  0.000  0.000
									-0.078  0.931  0.148  0.000  0.000
									0.005  0.691  0.304  0.000  0.000
									0.000  0.000  0.000  1.000  0.000">
				</feColorMatrix>
			</filter>
		</svg>
    	
		<script src="js/ingame-blueyellow-script.js"></script>

		<script type="module">
			
		import * as THREE from './three.js-dev/build/three.module.js';
		import * as dat from './three.js-dev/examples/jsm/libs/dat.gui.module.js';
		import {PointerLockControls} from './three.js-dev/examples/jsm/controls/PointerLockControls.js';
		import {GLTFLoader} from './three.js-dev/examples/jsm/loaders/GLTFLoader.js';

			let camera, scene, renderer, controls;
			
			let toFind = [];

			let raycaster;

			let moveForward = false;
			let moveBackward = false;
			let moveLeft = false;
			let moveRight = false;

			let goRight = 0;
			let goForward = 0;

			scene = new THREE.Scene();

			// findHelper : 거리에 따라 밝기가 변하는

			let frameLighting = new THREE.PointLight(0xffffff, 0, 1);
			frameLighting.castShadow = true;
			frameLighting.receiveShadow = true;
			frameLighting.position.set(0.985986, 1.7, 0.09);
			scene.add(frameLighting);


			// ===== GLTF 로딩 구문 =====
			let gltfLoader = new GLTFLoader();

			// findstar Loading
			let findstar;
			gltfLoader.load('models/obj/findstar.gltf', function(gltf){
				findstar = gltf.scene;
				findstar.name = "findstar";
				findstar.scale.set(0.09,0.09,0.09);
				findstar.position.set(0,1.1,0);
			});

			function init() {
				camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.01 , 9);
        		camera.lookAt(100, 0, 0);
				camera.position.set(0, 1.55, .08);
        		// camera.position.set(0,0.87,0);

				scene.background = new THREE.Color( 0xc5fffc );

				scene.fog = new THREE.FogExp2( 0xc5fffc, 0.2 );

				// lightings
				const sun = new THREE.DirectionalLight( 0xffffff, 1 );
				sun.position.set(0, 20, -4);

				sun.shadow.camera = new THREE.OrthographicCamera( -100, 100, 100, -100, 1, 200 );
				sun.castShadow = true;
				sun.shadow.mapSize.width = 4096;
				sun.shadow.mapSize.height = 4096;
				sun.shadow.bias = - 0.0001;
				scene.add(sun);
						
				const adjustingLight = new THREE.AmbientLight( 0xffffff, 0.4);
				scene.add(adjustingLight);

//======================여기서부터는 수정하지 않기=======================================
//-------------------------타이머 사전설정-------------
				//타이머시간 설정
				const startingMinutes = 6; //이걸로 타이머시간 조절
					let time = startingMinutes * 60;

					const countdownEl = document.getElementById('countdown');

					let updateCountdown;

// ---------------------- PointerLockControls---------------

				controls = new PointerLockControls( camera, document.body );

				// 처음 조작법화면 클릭시
				const blocker = document.getElementById( 'blocker' );
				const clickTostart = document.getElementById( 'click-to-start' );
				const crossWrap = document.getElementsByClassName( 'crossWrap' );
				const mission = document.querySelector('.mission');
				
				blocker.addEventListener( 'click', function () {
					controls.lock();
					blocker.style.pointerEvents = 'none';
				})

				//lock이 풀릴때
				controls.addEventListener( 'lock', function () {
					blocker.style.display = 'none';
					
					 //타이머작동
					updateCountdown = setInterval(function(){
					const minutes = Math.floor(time / 60);
					let seconds = time % 60;
					

					countdownEl.innerHTML = `${minutes<10 ? '0':''}${minutes}:${seconds<10 ? '0':''}${seconds}`;
				
					time--;

					//00:00일때 타이머 멈추고 팝업띄우기
					var timeoverPopup = document.querySelector('.timeover-popup');
					
					if (time < 0) {
						clearInterval(updateCountdown);
						timeoverPopup.style.display = 'block';
						controls.unlock();
			
					}
					},1000)
					
				} );

				//일시정지
				window.addEventListener('keydown',function(e){
							switch(e.keyCode){
							case 27:
							pause();
							break;
						}
					function pause(){
						pausePopup.style.display = 'block';
				  		blocker.style.pointerEvents = 'none';
						  unlock();
					}
					
					})

				//lock이 잠길때
				controls.addEventListener( 'unlock', function () {
					blocker.style.display = 'block';
					clickTostart.style.display = 'none'

					clearInterval(updateCountdown);//타이머 정지
					mission.style.display = 'none';//	
					// pausePopup.style.display = 'block';
				} )


				var pausePopup = document.querySelector('.pause-popup');
				const startBtn = document.querySelector('.continue-btn-box');

				startBtn.addEventListener('click', function(){
				pausePopup.style.display = 'none';
				controls.lock();
				blocker.style.pointerEvents = 'auto';
				})


				blocker.addEventListener('click', function(){
					mission.style.display = 'block';
					setTimeout(function(){//10s 후 사라짐
						mission.style.display = 'none';
					},10000)
				},{once : true})

//------------------------------------------------------------
//======================여기까지=======================================

				scene.add( controls.getObject() );

				const onKeyDown = function ( event ) {

					switch ( event.code ) {

						case 'ArrowUp':
						case 'KeyW':
							moveForward = true;
							goForward = 0.09;
							break;

						case 'ArrowLeft':
						case 'KeyA':
							moveLeft = true;
							goRight = -0.09;
							break;

						case 'ArrowDown':
						case 'KeyS':
							moveBackward = true;
							goForward = -0.09;
							break;

						case 'ArrowRight':
						case 'KeyD':
							moveRight = true;
							goRight = 0.09;
							break;
							
					}

				};
				const onKeyUp = function ( event ) {

					switch ( event.code ) {

						case 'ArrowUp':
						case 'KeyW':
							moveForward = false;
							goForward = 0;
							break;

						case 'ArrowLeft':
						case 'KeyA':
							moveLeft = false;
							goRight = 0;
							break;

						case 'ArrowDown':
						case 'KeyS':
							moveBackward = false;
							goForward = 0;
							break;

						case 'ArrowRight':
						case 'KeyD':
							moveRight = false;
							goRight = 0;
							break;
					}

				};

				document.addEventListener( 'keydown', onKeyDown );
				document.addEventListener( 'keyup', onKeyUp );

				raycaster = new THREE.Raycaster( new THREE.Vector3(), new THREE.Vector3( 0, - 1, 0 ), 0, 10 );

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild( renderer.domElement );

				renderer.setClearColor( 0xC1E4FA )
				renderer.setAnimationLoop( animate );
				renderer.shadowMap.enabled = true;
				renderer.shadowMap.type = THREE.PCFSoftShadowMap;

				renderer.toneMapping = THREE.ACESFilmicToneMapping;     // toneMapping 속성
				renderer.toneMappingExposure = 2;                     // 렌더러의 밝기 속성

				const gridHelper = new THREE.GridHelper( 1000, 1000 );
				scene.add( gridHelper );
			}

			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth, window.innerHeight );
			}

			let winter;
			gltfLoader.load('models/obj/winter.gltf', function(gltf){
				winter = gltf.scene;
				winter.name = "winter";
				winter.scale.set(0.09,0.09,0.09);
				winter.position.set(0,1.1,0);
				scene.add(winter);
			});

			let star;
			gltfLoader.load('models/obj/star.gltf', function(gltf){
				star = gltf.scene;
				star.name = "hiddenstar";
				star.scale.set(0.09,0.09,0.09);
				star.position.set(0,1.1,0);
				toFind.push( star.getObjectByName("Mesh_Mesh004") );
				scene.add(star);
			});

			let hiddensocks1;
			gltfLoader.load('models/obj/socks1.gltf', function(gltf){
				hiddensocks1 = gltf.scene;
				hiddensocks1.name = "hiddensocks1";
				hiddensocks1.scale.set(0.09,0.09,0.09);
				hiddensocks1.position.set(0,1.1,0);
				toFind.push( hiddensocks1.getObjectByName("Cube001_Cube002") );
				scene.add(hiddensocks1);
			});

			let hiddensocks2;
			gltfLoader.load('models/obj/socks2.gltf', function(gltf){
				hiddensocks2 = gltf.scene;
				hiddensocks2.name = "hiddensocks2";
				hiddensocks2.scale.set(0.09,0.09,0.09);
				hiddensocks2.position.set(0,1.1,0);
				toFind.push( hiddensocks2.getObjectByName("Cube001_Cube001") );
				scene.add(hiddensocks2);
			});

			let findsocks1;
			gltfLoader.load('models/obj/findsocks1.gltf', function(gltf){
				findsocks1 = gltf.scene;
				findsocks1.name = "findsocks1";
				findsocks1.scale.set(0.09,0.09,0.09);
				findsocks1.position.set(0,1.1,0);
			});

			let findsocks2;
			gltfLoader.load('models/obj/findsocks2.gltf', function(gltf){
				findsocks2 = gltf.scene;
				findsocks2.name = "findsocks2";
				findsocks2.scale.set(0.09,0.09,0.09);
				findsocks2.position.set(0,1.1,0);
			});

			let ornament1;
			gltfLoader.load('models/obj/ornament1.gltf', function(gltf){
				ornament1 = gltf.scene;
				ornament1.name = "ornament1";
				ornament1.scale.set(0.09,0.09,0.09);
				ornament1.position.set(0,1.1,0);
				toFind.push( ornament1.getObjectByName("ornament_Icosphere044"));
				scene.add(ornament1);
			});

			let ornament2;
			gltfLoader.load('models/obj/ornament2.gltf', function(gltf){
				ornament2 = gltf.scene;
				ornament2.name = "ornament2";
				ornament2.scale.set(0.09,0.09,0.09);
				ornament2.position.set(0,1.1,0);
				toFind.push( ornament2.getObjectByName("ornament_Icosphere006"));
				scene.add(ornament2);
			});

			let ornament3;
			gltfLoader.load('models/obj/ornament3.gltf', function(gltf){
				ornament3 = gltf.scene;
				ornament3.name = "ornament3";
				ornament3.scale.set(0.09,0.09,0.09);
				ornament3.position.set(0,1.1,0);
				toFind.push( ornament3.getObjectByName("ornament_Icosphere020"));
				scene.add(ornament3);
			});

			let findornament1;
			gltfLoader.load('models/obj/findornament1.gltf', function(gltf){
				findornament1 = gltf.scene;
				findornament1.name = "findornament1";
				findornament1.scale.set(0.09,0.09,0.09);
				findornament1.position.set(0,1.1,0);
			});

			let findornament2;
			gltfLoader.load('models/obj/findornament2.gltf', function(gltf){
				findornament2 = gltf.scene;
				findornament2.name = "findornament2";
				findornament2.scale.set(0.09,0.09,0.09);
				findornament2.position.set(0,1.1,0);
			});

			let findornament3;
			gltfLoader.load('models/obj/findornament3.gltf', function(gltf){
				findornament3 = gltf.scene;
				findornament3.name = "findornament3";
				findornament3.scale.set(0.09,0.09,0.09);
				findornament3.position.set(0,1.1,0);
			});

			// ===== 마우스를 활용하기 위한 구문 =====
			let mouse = new THREE.Vector2();
			$(window).on('mousemove', function(event){
            	mouse.x = (event.clientX / window.innerWidth) * 2 - 1
            	mouse.y = - (event.clientY / window.innerHeight) * 2 + 1
			});

      		// ***** 클릭한 오브젝트 찾는 구문 ****
			$(window).click(function(){
				raycaster.setFromCamera(new THREE.Vector2(0,0), camera)
        		let intersects = raycaster.intersectObjects( toFind )
				// ***** id값 불러오기 ****
				let element1 = document.getElementById("element1");
				let element2 = document.getElementById("element2");
				let element3 = document.getElementById("element3");
				let element4 = document.getElementById("element4");
				let element5 = document.getElementById("element5");
				let element6 = document.getElementById("element6");
				// console.log(scene);
				// toFind 배열로 raycaster를 진행
				if(intersects.length > 0){
         	 		// 찾은 object는 intersects[0].object 로 받아옴
					let foundMesh = intersects[0].object;
					if (foundMesh.name === "Mesh_Mesh004") {
						scene.getObjectByName("hiddenstar").visible = false;
						scene.add(findstar);
						element4.style.opacity = 1;
					}
					else if ( foundMesh.name === "Cube001_Cube002") {
						scene.getObjectByName("hiddensocks1").visible = false;
						scene.add(findsocks1);
						element5.style.opacity = 1;
					}
					else if ( foundMesh.name === "Cube001_Cube001") {
						scene.getObjectByName("hiddensocks2").visible = false;
						scene.add(findsocks2);
						element6.style.opacity = 1;
					}
					else if ( foundMesh.name === "ornament_Icosphere044") {
						scene.getObjectByName("ornament1").visible = false;
						scene.add(findornament1);
						element1.style.opacity = 1;
					}
					else if ( foundMesh.name === "ornament_Icosphere006") {
						scene.getObjectByName("ornament2").visible = false;
						scene.add(findornament2);
						element2.style.opacity = 1;
					}
					else if ( foundMesh.name === "ornament_Icosphere020") {
						scene.getObjectByName("ornament3").visible = false;
						scene.add(findornament3);
						element3.style.opacity = 1;
					}
				};
				scene.updateMatrix();
				console.log(toFind);
				}
			);
			
      		function animate() {
				// console.log(camera.position);
				// console.log(camera.position.distanceTo(frameLighting.position));
				if ( controls.isLocked === true ) {
					controls.moveRight( goRight );
					controls.moveForward( goForward );
				}

			renderer.render( scene, camera );
		}

    init();
	animate();

		</script>
	</body>
</html>